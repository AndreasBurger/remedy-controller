// Code generated by MockGen. DO NOT EDIT.
// Source: github.wdf.sap.corp/kubernetes/remedy-controller/pkg/client/azure (interfaces: Future,PublicIPAddressesClient,LoadBalancersClient)

// Package azure is a generated GoMock package.
package azure

import (
	context "context"
	network "github.com/Azure/azure-sdk-for-go/services/network/mgmt/2018-11-01/network"
	autorest "github.com/Azure/go-autorest/autorest"
	gomock "github.com/golang/mock/gomock"
	azure "github.wdf.sap.corp/kubernetes/remedy-controller/pkg/client/azure"
	reflect "reflect"
)

// MockFuture is a mock of Future interface
type MockFuture struct {
	ctrl     *gomock.Controller
	recorder *MockFutureMockRecorder
}

// MockFutureMockRecorder is the mock recorder for MockFuture
type MockFutureMockRecorder struct {
	mock *MockFuture
}

// NewMockFuture creates a new mock instance
func NewMockFuture(ctrl *gomock.Controller) *MockFuture {
	mock := &MockFuture{ctrl: ctrl}
	mock.recorder = &MockFutureMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFuture) EXPECT() *MockFutureMockRecorder {
	return m.recorder
}

// WaitForCompletionRef mocks base method
func (m *MockFuture) WaitForCompletionRef(arg0 context.Context, arg1 autorest.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForCompletionRef", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForCompletionRef indicates an expected call of WaitForCompletionRef
func (mr *MockFutureMockRecorder) WaitForCompletionRef(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForCompletionRef", reflect.TypeOf((*MockFuture)(nil).WaitForCompletionRef), arg0, arg1)
}

// MockPublicIPAddressesClient is a mock of PublicIPAddressesClient interface
type MockPublicIPAddressesClient struct {
	ctrl     *gomock.Controller
	recorder *MockPublicIPAddressesClientMockRecorder
}

// MockPublicIPAddressesClientMockRecorder is the mock recorder for MockPublicIPAddressesClient
type MockPublicIPAddressesClientMockRecorder struct {
	mock *MockPublicIPAddressesClient
}

// NewMockPublicIPAddressesClient creates a new mock instance
func NewMockPublicIPAddressesClient(ctrl *gomock.Controller) *MockPublicIPAddressesClient {
	mock := &MockPublicIPAddressesClient{ctrl: ctrl}
	mock.recorder = &MockPublicIPAddressesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPublicIPAddressesClient) EXPECT() *MockPublicIPAddressesClientMockRecorder {
	return m.recorder
}

// Client mocks base method
func (m *MockPublicIPAddressesClient) Client() autorest.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(autorest.Client)
	return ret0
}

// Client indicates an expected call of Client
func (mr *MockPublicIPAddressesClientMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockPublicIPAddressesClient)(nil).Client))
}

// Delete mocks base method
func (m *MockPublicIPAddressesClient) Delete(arg0 context.Context, arg1, arg2 string) (azure.Future, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(azure.Future)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockPublicIPAddressesClientMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPublicIPAddressesClient)(nil).Delete), arg0, arg1, arg2)
}

// Get mocks base method
func (m *MockPublicIPAddressesClient) Get(arg0 context.Context, arg1, arg2, arg3 string) (network.PublicIPAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(network.PublicIPAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockPublicIPAddressesClientMockRecorder) Get(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPublicIPAddressesClient)(nil).Get), arg0, arg1, arg2, arg3)
}

// List mocks base method
func (m *MockPublicIPAddressesClient) List(arg0 context.Context, arg1 string) (network.PublicIPAddressListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(network.PublicIPAddressListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockPublicIPAddressesClientMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPublicIPAddressesClient)(nil).List), arg0, arg1)
}

// MockLoadBalancersClient is a mock of LoadBalancersClient interface
type MockLoadBalancersClient struct {
	ctrl     *gomock.Controller
	recorder *MockLoadBalancersClientMockRecorder
}

// MockLoadBalancersClientMockRecorder is the mock recorder for MockLoadBalancersClient
type MockLoadBalancersClientMockRecorder struct {
	mock *MockLoadBalancersClient
}

// NewMockLoadBalancersClient creates a new mock instance
func NewMockLoadBalancersClient(ctrl *gomock.Controller) *MockLoadBalancersClient {
	mock := &MockLoadBalancersClient{ctrl: ctrl}
	mock.recorder = &MockLoadBalancersClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLoadBalancersClient) EXPECT() *MockLoadBalancersClientMockRecorder {
	return m.recorder
}

// Client mocks base method
func (m *MockLoadBalancersClient) Client() autorest.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(autorest.Client)
	return ret0
}

// Client indicates an expected call of Client
func (mr *MockLoadBalancersClientMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockLoadBalancersClient)(nil).Client))
}

// CreateOrUpdate mocks base method
func (m *MockLoadBalancersClient) CreateOrUpdate(arg0 context.Context, arg1, arg2 string, arg3 network.LoadBalancer) (azure.Future, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(azure.Future)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockLoadBalancersClientMockRecorder) CreateOrUpdate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockLoadBalancersClient)(nil).CreateOrUpdate), arg0, arg1, arg2, arg3)
}

// Get mocks base method
func (m *MockLoadBalancersClient) Get(arg0 context.Context, arg1, arg2, arg3 string) (network.LoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(network.LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockLoadBalancersClientMockRecorder) Get(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockLoadBalancersClient)(nil).Get), arg0, arg1, arg2, arg3)
}
